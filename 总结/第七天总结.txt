1.类：在开发过程中，任何实体都可以被抽象为一个使用类表达的类似对象的数据结构，这个数据结构既包含属性，又包含方法。
2.注意在声明类的时候，需要对类的属性的数据类型进行约束。
3.定义类的关键词 class 例声明人的类// 声明人的类es6中的类
class People {
						// 类的属性
            constructor(name, age) { // 构造器，实例化方法的时候触发
                this.name = name
                this.age = age
            }
            // 类的方法
            sport(){
                return this.name + '会运动'
            }
 }
对类进行实例化
let p = new People('小明',18)
调用类的方法
console.log(p.sport()); //小明会运动
获取类的属性
console.log(p.age); // 18

ts中的类
class People {
    name: string
    age: number
    constructor(name:string,age){
        this.name = name
        this.age = age
    }
    sport():string{
        return `${this.name}会运动`
    }
}
对类进行实例化
let p = new People('小明',18)
// 注意声明类的时候约束name属性为string类型，age属性为数字类型；实例化的时候要严格按照类型传参
调用类的方法
console.log(p.sport()); //小明会运动
获取类的属性
console.log(p.age); // 18

4.类的继承 TS中类的继承

和ES6中的继承一样，只是添加了属性的数据类型：⽤class关键字定义类，⽤extends关键字继承类，⽤super()表示⽗类

5.类的修饰符
定义属性的时候提供了三种修饰符
public          公有，类里面、子类、类外面都可以访问 
protected   保护类型 类里面、子类可以访问  类外面不可以访问
private		私有类型 类里面可以访问，其他不行

6.使用static修饰静态属性，静态属性，静态方法不能在实例上获取。
7.多态的定义：父类定义一个方法不去实现，让继承他的类去实现，每一个继承的类都有不同的表现。
8.### readonly 修饰符

在类里可以使用`readonly`关键字将属性设置为只读。设置为只读的属性，实例只能读取这个属性值，但不能修改。
9.参数属性简单来说就是在 constructor 构造函数的参数前面加上访问限定符，也就是前面讲的 public、private、protected 和 readonly 中的任意一个
10. 可选类属性
TS 可选类属性，也是使用`?`符号来标记
11. 存取器
这个也就 ES6 标准中的存值函数和取值函数，也就是在设置属性值的时候调用的函数，和在访问属性值的时候调用的函数，用法和写法和 ES6 的没有区别
12. 抽象类
抽象类一般用来被其他类继承，而不直接用它创建实例。抽象类和类内部定义抽象方法，使用`abstract`关键字
13. 如果是接口和接口、类和类直接的继承，使用extends，如果是类继承接口，则用implements。
14.接口可以继承一个类，当接口继承了该类后，会继承类的成员，但是不包括其实现，也就是只继承成员以及成员类型。接口还会继承类的`private`和`protected`修饰的成员，当接口继承的这个类中包含这两个修饰符修饰的成员时，这个接口只可被这个类或他的子类实现。
15.### TS中的类和ES6中的类的相同点和不同点

1. 都是采用extends语法进行继承

2. 在constructor中都需要首先使用super(xxx)调用父类构造函数，然后才能给this进行赋值

3. supper作为方法时指向父类构造函数，而作为对象且在普通方法中时指向父类的原型，在静态方法中时指向父类。

   不同点

   

   1. TypeScript提供抽象类，抽象方法，和接口继承。

4. TypeScript可以对类中属性或方法使用访问限定符。


16.定义抽象类的语法
   abstract class 类名 {}

17.抽象方法的语法：abstract 方法名():{}

18.抽象方法不能脱离抽象类，也就是说，抽象方法只能出现在抽象类中，抽象方法不能有具体体现，只能在派生类中实现
19.使用abstract关键字定义抽象类和抽象方法，抽象类中的抽象方法不包含具体实现且必须在派生类中实现
抽象方法只能放在抽象类里面；也就是说**抽象类和抽象方法是定义标准的**

20.接口约束类：类类型接口，和抽象类很类似，是用来约束类的；也就是类中必须有哪些属性和方法
21.使用接口约束类语法:class 类型 implements 接口名 {}
22.接口继承语法：接口一继承接口二：interface 接口一 extends 接口二 {}
23.实现接口约束类

```
class Coder implements IPeople {
    name: string
    constructor(name){
        this.name = name
    }
    work(): void {
        
    }
}
```

我们可以发现，使用IPeople约束类的时候，类必须同时具有name属性和work方法

